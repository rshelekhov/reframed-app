// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type Heading struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	ListID    string             `db:"list_id"`
	UserID    string             `db:"user_id"`
	IsDefault bool               `db:"is_default"`
	UpdatedAt time.Time          `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type List struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	UserID    string             `db:"user_id"`
	IsDefault bool               `db:"is_default"`
	UpdatedAt time.Time          `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type Reminder struct {
	ID        string             `db:"id"`
	Content   string             `db:"content"`
	Read      bool               `db:"read"`
	TaskID    string             `db:"task_id"`
	UserID    string             `db:"user_id"`
	UpdatedAt time.Time          `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type ReminderSetting struct {
	ID       int32  `db:"id"`
	Interval string `db:"interval"`
}

type Status struct {
	ID    int32  `db:"id"`
	Title string `db:"title"`
}

type Tag struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	UserID    string             `db:"user_id"`
	UpdatedAt time.Time          `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type Task struct {
	ID          string             `db:"id"`
	Title       string             `db:"title"`
	Description pgtype.Text        `db:"description"`
	StartDate   pgtype.Timestamptz `db:"start_date"`
	Deadline    pgtype.Timestamptz `db:"deadline"`
	StartTime   pgtype.Timestamptz `db:"start_time"`
	EndTime     pgtype.Timestamptz `db:"end_time"`
	StatusID    int32              `db:"status_id"`
	ListID      string             `db:"list_id"`
	HeadingID   string             `db:"heading_id"`
	UserID      string             `db:"user_id"`
	UpdatedAt   time.Time          `db:"updated_at"`
	DeletedAt   pgtype.Timestamptz `db:"deleted_at"`
}

type TaskTagsView struct {
	TaskID string      `db:"task_id"`
	Tags   interface{} `db:"tags"`
}

type TasksTag struct {
	TaskID string `db:"task_id"`
	TagID  string `db:"tag_id"`
}
