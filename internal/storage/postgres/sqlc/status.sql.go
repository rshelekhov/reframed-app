// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: status.sql

package sqlc

import (
	"context"
)

const getStatusID = `-- name: GetStatusID :one
SELECT id
FROM statuses
WHERE title = $1
`

func (q *Queries) GetStatusID(ctx context.Context, title string) (int32, error) {
	row := q.db.QueryRow(ctx, getStatusID, title)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getStatusName = `-- name: GetStatusName :one
SELECT title
FROM statuses
WHERE id = $1
`

func (q *Queries) GetStatusName(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getStatusName, id)
	var title string
	err := row.Scan(&title)
	return title, err
}

const getStatuses = `-- name: GetStatuses :many
SELECT id, title
FROM statuses
`

func (q *Queries) GetStatuses(ctx context.Context) ([]Status, error) {
	rows, err := q.db.Query(ctx, getStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Status{}
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
